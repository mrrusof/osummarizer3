(let
  f1:f1:(x2:int -> ret_f1:unit)
=
  (fun
    x2:x2:int
  ->
    (let
      _3:_3:unit
    =
      (assume
        (
          (>):gt_asu__3:(a_gt_asu__3:int -> b_gt_asu__3:(ba_gt_asu__3:int -> asu__3:bool))
          x2:a_gt_asu__3:int
          1:ba_gt_asu__3:int
        ):asu__3:bool
      ):_3:unit
    in
      (assert
        (
          (>):gt_ase_ret_f1:(a_gt_ase_ret_f1:int -> b_gt_ase_ret_f1:(ba_gt_ase_ret_f1:int -> ase_ret_f1:bool))
          x2:a_gt_ase_ret_f1:int
          0:ba_gt_ase_ret_f1:int
        ):ase_ret_f1:bool
      ):ret_f1:unit
    ):ret_f1:unit
  ):f1:(x2:int -> ret_f1:unit)
in
  (
    f1:f1:(a_f1_v:int -> v:unit)
    (
      Obj.magic:magic_a_f1_v:(a_magic_a_f1_v:unit -> a_f1_v:int)
      unit:a_magic_a_f1_v:unit
    ):a_f1_v:int
  ):v:unit
):v:unit