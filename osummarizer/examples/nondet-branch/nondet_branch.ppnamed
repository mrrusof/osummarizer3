(let
  main1:main1:(u2:unit -> ret_main1:int)
=
  (fun
    u2:u2:unit
  ->
    (let
      x3:x3:int
    =
      (if
        (
          (>=):geq_c_x3:(a_geq_c_x3:int -> b_geq_c_x3:(ba_geq_c_x3:int -> c_x3:bool))
          (
            Obj.magic:magic_a_geq_c_x3:(a_magic_a_geq_c_x3:unit -> a_geq_c_x3:int)
            unit:a_magic_a_geq_c_x3:unit
          ):a_geq_c_x3:int
          1:ba_geq_c_x3:int
        ):c_x3:bool
      then
        1:x3:int
      else
        2:x3:int
      ):x3:int
    in
      (assert
        (
          (>):gt_ase_ret_main1:(a_gt_ase_ret_main1:int -> b_gt_ase_ret_main1:(ba_gt_ase_ret_main1:int -> ase_ret_main1:bool))
          x3:a_gt_ase_ret_main1:int
          0:ba_gt_ase_ret_main1:int
        ):ase_ret_main1:bool
      ):ret_main1:int
    ):ret_main1:int
  ):main1:(u2:unit -> ret_main1:int)
in
  (
    main1:main1:(a_main1_v:unit -> v:unit)
    (
      Obj.magic:magic_a_main1_v:(a_magic_a_main1_v:unit -> a_main1_v:unit)
      unit:a_magic_a_main1_v:unit
    ):a_main1_v:unit
  ):v:unit
):v:unit